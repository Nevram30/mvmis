// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  MANAGER
  SECRETARY
  MECHANIC
  PROPRIETOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(PROPRIETOR)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vehicle {
  id            String         @id @default(cuid())
  plateNumber   String         @unique
  make          String
  engineNumber  String         @unique
  purchaseDate  DateTime
  purchaseCost  Decimal        @db.Decimal(10, 2)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  repairCosts   RepairCost[]
  sellingPrices SellingPrice[]
}

model RepairCost {
  id             String   @id @default(cuid()) @map("id_repair_cost")
  vehicleId      String   @map("id_vehicle")
  fuelCost       Decimal  @default(0) @map("fuel_cost") @db.Decimal(10, 2)
  laborCost      Decimal  @default(0) @map("labor_cost") @db.Decimal(10, 2)
  materialCost   Decimal  @default(0) @map("material_cost") @db.Decimal(10, 2)
  otherCost      Decimal  @default(0) @map("other_cost") @db.Decimal(10, 2)
  mobilization   Decimal  @default(0) @db.Decimal(10, 2)
  licensing      Decimal  @default(0) @db.Decimal(10, 2)
  totalOtherCost Decimal  @default(0) @map("total_other_cost") @db.Decimal(10, 2)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("repair_cost")
}

model SellingPrice {
  id           String   @id @default(cuid()) @map("id_selling_price")
  vehicleId    String   @map("id_vehicle")
  sellingPrice Decimal  @map("selling_price") @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@map("selling_price")
}
